services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder # On utilise l'étape 'builder' qui contient les outils Go et 'air'.
    container_name: go_app_dev
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    ports:
      - "${APP_PORT_HOST}:${APP_PORT_CONTAINER}"
    volumes:
      - .:/app # Monte le code source local pour activer le hot-reload.
    command: air # Lance 'air' pour surveiller et recompiler automatiquement le code.
    environment:
      # On force la valeur de DB_HOST à 'db', le nom du service de la base de données.
      # C'est crucial pour la communication entre conteneurs.
      - DB_HOST=db
      - DB_PORT=${DB_PORT_CONTAINER}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
      - APP_PORT=${APP_PORT_CONTAINER}
    depends_on:
      db:
        condition: service_healthy
    networks:
      app_network:
        aliases:
          - go-app

  db:
    image: postgres:15-alpine # Utilise une image PostgreSQL officielle basée sur Alpine
    container_name: postgres_db_service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume nommé pour la persistance des données
    ports:
      - "${DB_PORT_HOST}:${DB_PORT_CONTAINER}" # Mappe un port de l'hôte au port du conteneur (pour accès externe si besoin)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      app_network:
        aliases:
          - postgres

volumes:
  postgres_data: # Définit un volume nommé pour la persistance des données PostgreSQL

networks:
  app_network: # Définit un réseau personnalisé pour la communication entre services
    driver: bridge
